---
title: "Week 2 Exercises Solutions"
format: html
editor: visual
---

# Data Cleaning, Part 1 Exercises

## Part 1: Looking at documentation to load in data

Suppose that you want to load in data "students.csv" in a CSV format, and you don't know what tools to use. You decide to see whether the package "readr" can be useful to solve your problem. Where should you look?

All R packages must be stored on CRAN (Comprehensive R Archive Network), and all packages have a website that points to the reference manual (what is pulled up using the `?` command), source code, vignettes examples, and dependencies on other packages. Here is [the website](https://cran.r-project.org/web/packages/readr/) for "readr". Within the website, I like to look at the [URL page](https://readr.tidyverse.org/) for more documentation, or the Vignettes page, such as [this page](https://cran.r-project.org/web/packages/readr/vignettes/column-types.html), for examples.

In the package, you find some potential functions for importing your data:

-   `read_csv("file.csv")` for comma-separated files

-   `read_tsv("file.tsv")` for tab-deliminated files

-   `read_excel("example.xlsx")` for excel files

-   `read_excel("example.xlsx", sheet = "sheet1")` for excel files with a sheet name

-   `read_delim()` for general-deliminated files, such as: `read_delim("file.csv", sep = ",")`.

After looking at the vignettes, it seems that `read_csv()` is a function to try.

Let's look at the `read_csv()` function documentation, which can be accessed via `?read_csv`.

```{r, message=F, warning=F}
library(tidyverse)
library(palmerpenguins)
?read_csv
```

```         
read_csv(
  file,
  col_names = TRUE,
  col_types = NULL,
  col_select = NULL,
  id = NULL,
  locale = default_locale(),
  na = c("", "NA"),
  quoted_na = TRUE,
  quote = "\"",
  comment = "",
  trim_ws = TRUE,
  skip = 0,
  n_max = Inf,
  guess_max = min(1000, n_max),
  name_repair = "unique",
  num_threads = readr_threads(),
  progress = show_progress(),
  show_col_types = should_show_types(),
  skip_empty_rows = TRUE,
  lazy = should_read_lazy()
)
```

We see that the only *required* argument is the `file` variable, which is documented to be "Either a path to a file, a connection, or literal data (either a single string or a raw vector)." All the other arguments are considered *optional*, because they have a pre-allocated value in the documentation.

Load in "students.csv" via `read_csv()` function as a dataframe variable `students` and take a look at its contents via `View()`.

```{r}
students = read_csv("students.csv")
```

Something looks weird here. There is only one column, and it seems that the first two entries start with "\#", and don't fit a CSV file format. These first two entries that start with "\#" likely are comments giving metadata about the file, and they should be ignore when loading in the data.

Let's try again. Take a look at the documentation for the `comment` argument and give it an appropriate value. Any text after the comment characters will be silently ignored.

```{r}
students = read_csv("students.csv", comment = "#")
```

The column names are not very consistent. Modify `names(students)` so that it has more consistent column names.

```{r}
names(students) = c("Student_ID", "Full_Name", "Favorite_Food", "Meal_Plan", "Age")

```

For more information on loading in data, see this chapter of [R for Data Science](https://r4ds.hadley.nz/spreadsheets).

## Part 2: Recoding data

Consider this vector:

```{r}
scores = c(23, 46, -3, 5, -1)
```

Recode `scores` so that all the negative values are 0.

```{r}
scores[scores < 0] = 0
```

Let's look at the values of `students` dataframe more carefully. We will do some recoding on this small dataframe. It may feel trivial because you could do this by hand in Excel, but this is a practice on how we can scale this up with larger datasets!

Notice that some of the elements of this dataframe has proper `NA` values and also a character "N/A". We want "N/A" to be a proper `NA` value.

Recode "N/A" to `NA` in the `favorite_food` column:

```{r}
#We load in "students" again here, so that everyone is working with 
#a consistent dataframe, regardless what you did in the previous section.

students = read_csv("students.csv", comment = "#")
names(students) = c("student_id", "full_name", "favorite_food", "meal_plan", "age")
```

```{r}
students$favorite_food[students$favorite_food == "N/A"] = NA
```

Recode "five" to 5 in the `age` column:

```{r}
students$age[students$age == "five"] = 5
```

Create a new column `age_category` so that it has value "toddler" if `age` is \< 6, and "child" if `age` is \>= 6.

(Hint: You can create a new column via `mutate`, or you can directly refer to the new column via `student$age_category`.)

```{r}

students$age_category = if_else(students$age < 6, "toddler", "child")
#or
students$age_category = case_when(students$age < 6 ~ "toddler",
                                  students$age >= 6 ~ "child")
#or
students = mutate(students, age_category = if_else(age < 6, "toddler", "child"))
```

Create a new column `favorite_food_numeric` so that it has value 1 if `favorite_food` is "Breakfast and lunch", 2 if "Lunch only", and 3 if "Dinner only".

```{r}
#there's a typo in the exercise instructions, sorry!!!
students$meal_plan_numeric = case_when(students$meal_plan == "Breakfast and lunch" ~ 1,
                                           students$meal_plan == "Lunch only" ~ 2,
                                           students$meal_plan == "Dinner only" ~ 3)
```

## Feedback!

How many hours did you spend on this exercise?

```{r}
time_spent = 0 
```

If you worked with other peers, write their names down in the following character vector: each element is one person's name.

```{r}
peers = c("myself")
```
