# Functions Exercises

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
library(cancerprof)
```

## Part 1: Writing your function

Create a function, called `num_na` in which the function takes in any vector, and then return a single numeric value. This numeric value is the number of `NA`s in the vector. Use cases: `num_na(c(NA, 2, 3, 4, NA, 5)) = 2` and `num_na(c(2, 3, 4, 5)) = 0`.

Hint 1: Use `is.na()` function. Hint 2: Given a logical vector, you can count the number of `TRUE` values by using `sum()`, such as `sum(c(TRUE, TRUE, FALSE)) = 2`.

```{r}
num_na = function(vect) {
  na_vect = is.na(vect)
  num = sum(na_vect)
  return(num)
}

num_na(c(NA, 2, 3, 4, NA, 5))
num_na(c(2, 3, 4, 5))
```

Create a function, called `medicaid_eligible` in which the function takes in one argument: a numeric vector called `age`. The function returns a numeric vector with the same length as `age`, in which elements are `0` for indicies that are less than 65 in `age`, and `1` for indicies 65 or higher in `age`. Use cases: `medicaid_eligible(c(30, 70)) = c(0, 1)`

Hint: This is a data recoding problem!

```{r}

medicaid_eligible = function(age) {
  age = ifelse(age < 65, 0, 1)
  return(age)
}

stacy_medicaid_eligible = function(age) {
  agecat=age
  agecat[agecat < 65] = 0
  agecat[agecat >= 65] = 1
  return(agecat)
}

ted_medicaid_eligible <- function(age_vec, eligible_age =65){
  bool_vec <- age_vec > eligible_age
  return(as.numeric(bool_vec))
}

medicaid_eligible(c(30, 70))

medicaid_eligible(100)

stacy_medicaid_eligible(c(30, 70))

ted_medicaid_eligible(c(30, 65, 70))


```

Let's improve the use of this function a little bit. What happens if the user run `medicaid_eligible(c("hello", "there"))`? It still runs, but some kind of weird coercing happened (try it yourself!). A better design of this function would prevent the user using the function if it wasn't a numeric data type.

We need to add the following logical structure: "if age is a numeric data type, then run rest of the function. else, return `NA`". We can do this via **conditionals**, which looks like this:

```         
if (condition_is_TRUE) {
  #do this
}else {
  #do something else
}
```

In the context of this problem:

```         
medicaid_eligible = function(age) {
  if (is.numeric(age)) {
    #do this
  }else {
    return(NA)
  }
}
```

Modify `medicaid_eligible()` so that if you give the input a numeric value, it returns the original value as before, but if you give the input anything other data type, it returns `NA`. Test it yourself to see that it works.

```{r}
medicaid_eligible = function(age) {
  if (is.numeric(age)) {
    age = ifelse(age < 65, 0, 1)
    return(age)
  }else {
    return(NA)
  }
}

medicaid_eligible("car")

```

## Part 2: Functions for State Cancer Profiles

Let's look at the analysis code we have written for State Cancer Profile again.

We load in cancer incidence rates and do some data cleaning, for females and males.

```{r}
#female
female_melanoma_WA = incidence_cancer("WA", "county", "melanoma of the skin", "all races (includes hispanic)", "females", "all ages", "all stages", "latest 5 year average")
female_melanoma_WA = select(female_melanoma_WA, County, `Age Adjusted Incidence Rate`)
names(female_melanoma_WA) = c("County", "Age_adjusted_incidence_rate")
female_melanoma_WA$Age_adjusted_incidence_rate[female_melanoma_WA$Age_adjusted_incidence_rate == "* "] = NA
female_melanoma_WA$Age_adjusted_incidence_rate = as.numeric(female_melanoma_WA$Age_adjusted_incidence_rate)

#male
male_melanoma_WA = incidence_cancer("WA", "county", "melanoma of the skin", "all races (includes hispanic)", "males", "all ages", "all stages", "latest 5 year average")
male_melanoma_WA = select(male_melanoma_WA, County, `Age Adjusted Incidence Rate`)
names(male_melanoma_WA) = c("County", "Age_adjusted_incidence_rate")
male_melanoma_WA$Age_adjusted_incidence_rate[male_melanoma_WA$Age_adjusted_incidence_rate == "* "] = NA
male_melanoma_WA$Age_adjusted_incidence_rate = as.numeric(male_melanoma_WA$Age_adjusted_incidence_rate)
```

The code for females and males are nearly identical with the exception that one of the input arguments for `incidence_cancer()` is "female" and the other is "male". There is a lot of redundancy as a result.

Write a function, `process_incidence_cancer()` in which the function takes in one argument: a character `sex`. The function returns a dataframe with the columns `County` and `Age_adjusted_incidence_rate` for that particular sex. Use cases: `process_incidence_cancer("females")`, and `process_incidence_cancer("males")`

```{r}
# A great solution, but dependent on the dataframes we are trying to compute!
# process_incidence_cancer = function(sex) {
#   case_when(sex == "female" ~ female_melanoma_WA,
#             sex == "male" ~ male_melanoma_WA)
# }


process_incidence_cancer = function(sex) {
  melanoma_WA = incidence_cancer("WA", "county", "melanoma of the skin", "all races (includes hispanic)", sex, "all ages", "all stages", "latest 5 year average")
  melanoma_WA = select(melanoma_WA, County, `Age Adjusted Incidence Rate`)
  names(melanoma_WA) = c("County", "Age_adjusted_incidence_rate")
  melanoma_WA$Age_adjusted_incidence_rate[melanoma_WA$Age_adjusted_incidence_rate == "* "] = NA
  melanoma_WA$Age_adjusted_incidence_rate = as.numeric(melanoma_WA$Age_adjusted_incidence_rate)
  return(melanoma_WA)
}

process_incidence_cancer("females")
```

Can you improve `process_incidence_cancer()` so that if `sex` is "females" *or* "males", it runs as it has been, but if `sex` is anything else, it returns `NA`?

```{r}
process_incidence_cancer = function(sex) {
  if (sex == "males" | sex == "females") {
    melanoma_WA = incidence_cancer("WA", "county", "melanoma of the skin", "all races (includes hispanic)", sex, "all ages", "all stages", "latest 5 year average")
    melanoma_WA = select(melanoma_WA, County, `Age Adjusted Incidence Rate`)
    names(melanoma_WA) = c("County", "Age_adjusted_incidence_rate")
    melanoma_WA$Age_adjusted_incidence_rate[melanoma_WA$Age_adjusted_incidence_rate == "* "] = NA
    melanoma_WA$Age_adjusted_incidence_rate = as.numeric(melanoma_WA$Age_adjusted_incidence_rate)
    return(melanoma_WA)
  }else {
    return(NA)
  }
}
```
