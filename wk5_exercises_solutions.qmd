# Iteration Exercises

```{r, message=FALSE, warning=FALSE}
library(cancerprof)
library(tidyverse)
library(palmerpenguins)
```

## Part 1: Iteration warm-up

Write a function called `num_unique()` that takes any vector input, and then returns a numeric that gives the number of unique elements in the vector.

Hint: use the functions `unique()`, which gives you the unique elements of a vector, and `length().`

```{r}
num_unique = function(vector) {
  result = length(unique(vector))
  return(result)
}
```

Test that the function works.

```{r}
num_unique(c(1, 1, 2, 3))
```

Now, we will use this function to iterate over the `penguins` columns to get the number of unique elements for each column. Here, it's better to think about `penguins` as a *list*, where each *element of the list is a column* (remember we talked about treating dataframes as lists in week 1!).

Before using the functional, let's practice writing the first and second iteration down:

```{r}
num_unique(penguins[[1]])

#do it for the second iteration!
num_unique(penguins[[2]])
```

Then, to do this functionally, we think about:

-   Variable we need to loop through: `penguins`

-   The repeated task as a function: `num_unique`

-   The looping mechanism, and its output: `map_dbl()`

```{r}
map_dbl(penguins, num_unique)
```

## Part 2: Iteration in State Cancer Profiles

From the previous' week exercise, we created a function to process and clean cancer incidence data when given the demographic's sex. In this version, a new column is added to designate the sex:

```{r}
process_incidence_cancer = function(sex) {
  df = incidence_cancer("WA", "county", "melanoma of the skin", "all races (includes hispanic)", sex, "all ages", "all stages", "latest 5 year average")
  
  df = select(df, County, `Age Adjusted Incidence Rate`)
  
  names(df) = c("County", "Age_adjusted_incidence_rate")
  
  df$Age_adjusted_incidence_rate[df$Age_adjusted_incidence_rate == "* "] = NA
  df$Age_adjusted_incidence_rate = as.numeric(df$Age_adjusted_incidence_rate)
  
  df$Sex = sex #new column!
  
  return(df)
}
```

We are ready to use this function for females and males. Suppose we anticipate that we will use our function for many different inputs in the future will scale up in the future: perhaps we modify the function to take in state, and we want to analyze all states. As a proof of concept, can we iterate through "females" and "males" via a Functional?

Before using the functional, let's practice writing the first iteration down:

```{r}
parameters = c("females", "males")

#first iteration:
process_incidence_cancer(parameters[1])
```

Then, to do this functionally, we think about:

-   Variable we need to loop through: `parameters`

-   The repeated task as a function: `process_incidence_cancer()`

-   The looping mechanism, and its output: ?

Store your result as: `incidence_cancer_list`. It should be a list containing two elements, and each element is a dataframe.

```{r}
incidence_cancer_list = map(parameters, process_incidence_cancer)
```

To continue the analysis, previously we had used `full_join()` and `pivot_longer()` to get the dataframe in the right format for plotting. Here's an alternative way: because in this version of the function we added a column sex, if we stack both of these dataframes on top of each other, we would have the columns "County", "Age_adjusted_incidence_rate", and "Sex" ready for plotting. To do so, we use the function `rbind()` (row bind) to bind two dataframes together by rows:

```{r}
incidence_cancer_analysis = rbind(incidence_cancer_list[[1]], incidence_cancer_list[[2]])
```

Plot:

```{r}
ggplot(incidence_cancer_analysis, aes(x = County, y = Age_adjusted_incidence_rate, fill = Sex)) + geom_bar(position="dodge", stat="identity") + theme(axis.text.x = element_text(angle = 90)) + labs(title = "Melanoma", y = "Incidence Rate per 100k people")
```

## Part 3: Iteration in State Cancer Profiles for states

Now, let's change up our analysis so that we iterate through all states and get the melanoma cancer incidence rate.

Write a new function, `process_incidence_cancer_by_state()` so that it takes in the input argument `state` as a character. When calling `incidence_cancer()` within your new function, the first argument, `area`, should use your `state` input argument, and the `sex` argument should have a fixed value of your choice.

The function returns a dataframe with the following columns: `County`, `Age_adjusted_incidence_rate`, and `State`. You will have to create the `State` column to have the value of `state` near the end of the function.

```{r}
process_incidence_cancer_by_state = function(state) {
    df = incidence_cancer(state, "county", "melanoma of the skin", "all races (includes hispanic)", "females", "all ages", "all stages", "latest 5 year average")
  
  df = select(df, County, `Age Adjusted Incidence Rate`)
  
  names(df) = c("County", "Age_adjusted_incidence_rate")
  
  df$Age_adjusted_incidence_rate[df$Age_adjusted_incidence_rate == "* "] = NA
  df$Age_adjusted_incidence_rate = as.numeric(df$Age_adjusted_incidence_rate)
  
  df$State = state #new column!
  
  return(df)
}
```

Test that it works on a few states of choice:

```{r}
process_incidence_cancer_by_state("OR")
```

Let's get all the state abbreviations (except Louisiana, Alaska - no data for some reason). Here's a dataset:

```{r}
states = read_delim("states.txt", delim = "\t", col_names = c("fullname", "shorthand"))
head(states)
```

Now, let's run `process_incidence_cancer_by_state()` for all states: use a functional to apply `process_incidence_cancer_by_state()` on each element of `states$shorthand`, and store it as `results`.

```{r}
results = map(states$shorthand, process_incidence_cancer_by_state)
```

Great! Now we have a large list, in which each element is a dataframe belonging to a state. To consolidate all of these dataframes together, we could use `rbind()` to start: `rbind(results[[1]], results[[2]])`, but we would need to continue this with `rbind(rbind(results[[1]], results[[2]]), results[[3]])`, which becomes unwieldy very quickly. We wish `rbind()` was designed to handle combining two dataframes more elegantlyâ€¦

A solution to this is to use the `reduce()` function: it takes a list or vector of length *n* and produces a single value by calling a function with a pair of values at a time:

![](https://d33wubrfki0l68.cloudfront.net/9c239e1227c69b7a2c9c2df234c21f3e1c74dd57/eec0e/diagrams/functionals/reduce.png){width="300"}

`reduce(c(1, 2, 3, 4), f)` is equivalent to `f(f(f(1, 2), 3), 4)`.

We can think of `reduce()` as a useful way to generalize a function that works with two inputs to work with any number of inputs.

Try `reduce()` on `results` with `rbind`.

```{r}
final_df = reduce(results, rbind)
```

Follow up with an analysis of your choice!

```{r}

```
